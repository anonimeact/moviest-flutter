// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'app/data/models/detail_movie_model_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7255924499847748158),
      name: 'DetailMovieModel',
      lastPropertyId: const IdUid(22, 8617343808099714004),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9047896846965077692),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 443438218625381584),
            name: 'adult',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4631715502563377931),
            name: 'backdropPath',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8106168612306847655),
            name: 'budget',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8266882986227001132),
            name: 'genres',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1378150545856869636),
            name: 'homepage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4244616031148610035),
            name: 'idMovie',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2726955321415482558),
            name: 'imdbId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2270118622635627170),
            name: 'originalLanguage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3228820602888034364),
            name: 'originalTitle',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8728502096538883297),
            name: 'overview',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 8447902023722648921),
            name: 'popularity',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 155600114248998161),
            name: 'posterPath',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 1170455250367541359),
            name: 'releaseDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 8609373158876355349),
            name: 'revenue',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 1689942938155212916),
            name: 'runtime',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 3921768146730030030),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 3758288015702807358),
            name: 'tagline',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 6164829283774290953),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 7828721645163208106),
            name: 'video',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 6849721352527594633),
            name: 'voteAverage',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 8617343808099714004),
            name: 'voteCount',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 7255924499847748158),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    DetailMovieModel: EntityDefinition<DetailMovieModel>(
        model: _entities[0],
        toOneRelations: (DetailMovieModel object) => [],
        toManyRelations: (DetailMovieModel object) => {},
        getId: (DetailMovieModel object) => object.id,
        setId: (DetailMovieModel object, int id) {
          object.id = id;
        },
        objectToFB: (DetailMovieModel object, fb.Builder fbb) {
          final backdropPathOffset = object.backdropPath == null
              ? null
              : fbb.writeString(object.backdropPath!);
          final genresOffset =
              object.genres == null ? null : fbb.writeString(object.genres!);
          final homepageOffset = object.homepage == null
              ? null
              : fbb.writeString(object.homepage!);
          final imdbIdOffset =
              object.imdbId == null ? null : fbb.writeString(object.imdbId!);
          final originalLanguageOffset = object.originalLanguage == null
              ? null
              : fbb.writeString(object.originalLanguage!);
          final originalTitleOffset = object.originalTitle == null
              ? null
              : fbb.writeString(object.originalTitle!);
          final overviewOffset = object.overview == null
              ? null
              : fbb.writeString(object.overview!);
          final posterPathOffset = object.posterPath == null
              ? null
              : fbb.writeString(object.posterPath!);
          final releaseDateOffset = object.releaseDate == null
              ? null
              : fbb.writeString(object.releaseDate!);
          final statusOffset =
              object.status == null ? null : fbb.writeString(object.status!);
          final taglineOffset =
              object.tagline == null ? null : fbb.writeString(object.tagline!);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          fbb.startTable(23);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.adult);
          fbb.addOffset(2, backdropPathOffset);
          fbb.addInt64(3, object.budget);
          fbb.addOffset(4, genresOffset);
          fbb.addOffset(5, homepageOffset);
          fbb.addInt64(6, object.idMovie);
          fbb.addOffset(7, imdbIdOffset);
          fbb.addOffset(8, originalLanguageOffset);
          fbb.addOffset(9, originalTitleOffset);
          fbb.addOffset(10, overviewOffset);
          fbb.addFloat64(11, object.popularity);
          fbb.addOffset(12, posterPathOffset);
          fbb.addOffset(13, releaseDateOffset);
          fbb.addInt64(14, object.revenue);
          fbb.addInt64(15, object.runtime);
          fbb.addOffset(16, statusOffset);
          fbb.addOffset(17, taglineOffset);
          fbb.addOffset(18, titleOffset);
          fbb.addBool(19, object.video);
          fbb.addFloat64(20, object.voteAverage);
          fbb.addInt64(21, object.voteCount);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final adultParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 6);
          final backdropPathParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final budgetParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final genresParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final homepageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final idMovieParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final imdbIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final originalLanguageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final originalTitleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final overviewParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final popularityParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 26);
          final posterPathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final releaseDateParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 30);
          final revenueParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 32);
          final runtimeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 34);
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 36);
          final taglineParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 38);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 40);
          final videoParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 42);
          final voteAverageParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 44);
          final voteCountParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 46);
          final object = DetailMovieModel(
              adult: adultParam,
              backdropPath: backdropPathParam,
              budget: budgetParam,
              genres: genresParam,
              homepage: homepageParam,
              idMovie: idMovieParam,
              imdbId: imdbIdParam,
              originalLanguage: originalLanguageParam,
              originalTitle: originalTitleParam,
              overview: overviewParam,
              popularity: popularityParam,
              posterPath: posterPathParam,
              releaseDate: releaseDateParam,
              revenue: revenueParam,
              runtime: runtimeParam,
              status: statusParam,
              tagline: taglineParam,
              title: titleParam,
              video: videoParam,
              voteAverage: voteAverageParam,
              voteCount: voteCountParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [DetailMovieModel] entity fields to define ObjectBox queries.
class DetailMovieModel_ {
  /// see [DetailMovieModel.id]
  static final id =
      QueryIntegerProperty<DetailMovieModel>(_entities[0].properties[0]);

  /// see [DetailMovieModel.adult]
  static final adult =
      QueryBooleanProperty<DetailMovieModel>(_entities[0].properties[1]);

  /// see [DetailMovieModel.backdropPath]
  static final backdropPath =
      QueryStringProperty<DetailMovieModel>(_entities[0].properties[2]);

  /// see [DetailMovieModel.budget]
  static final budget =
      QueryIntegerProperty<DetailMovieModel>(_entities[0].properties[3]);

  /// see [DetailMovieModel.genres]
  static final genres =
      QueryStringProperty<DetailMovieModel>(_entities[0].properties[4]);

  /// see [DetailMovieModel.homepage]
  static final homepage =
      QueryStringProperty<DetailMovieModel>(_entities[0].properties[5]);

  /// see [DetailMovieModel.idMovie]
  static final idMovie =
      QueryIntegerProperty<DetailMovieModel>(_entities[0].properties[6]);

  /// see [DetailMovieModel.imdbId]
  static final imdbId =
      QueryStringProperty<DetailMovieModel>(_entities[0].properties[7]);

  /// see [DetailMovieModel.originalLanguage]
  static final originalLanguage =
      QueryStringProperty<DetailMovieModel>(_entities[0].properties[8]);

  /// see [DetailMovieModel.originalTitle]
  static final originalTitle =
      QueryStringProperty<DetailMovieModel>(_entities[0].properties[9]);

  /// see [DetailMovieModel.overview]
  static final overview =
      QueryStringProperty<DetailMovieModel>(_entities[0].properties[10]);

  /// see [DetailMovieModel.popularity]
  static final popularity =
      QueryDoubleProperty<DetailMovieModel>(_entities[0].properties[11]);

  /// see [DetailMovieModel.posterPath]
  static final posterPath =
      QueryStringProperty<DetailMovieModel>(_entities[0].properties[12]);

  /// see [DetailMovieModel.releaseDate]
  static final releaseDate =
      QueryStringProperty<DetailMovieModel>(_entities[0].properties[13]);

  /// see [DetailMovieModel.revenue]
  static final revenue =
      QueryIntegerProperty<DetailMovieModel>(_entities[0].properties[14]);

  /// see [DetailMovieModel.runtime]
  static final runtime =
      QueryIntegerProperty<DetailMovieModel>(_entities[0].properties[15]);

  /// see [DetailMovieModel.status]
  static final status =
      QueryStringProperty<DetailMovieModel>(_entities[0].properties[16]);

  /// see [DetailMovieModel.tagline]
  static final tagline =
      QueryStringProperty<DetailMovieModel>(_entities[0].properties[17]);

  /// see [DetailMovieModel.title]
  static final title =
      QueryStringProperty<DetailMovieModel>(_entities[0].properties[18]);

  /// see [DetailMovieModel.video]
  static final video =
      QueryBooleanProperty<DetailMovieModel>(_entities[0].properties[19]);

  /// see [DetailMovieModel.voteAverage]
  static final voteAverage =
      QueryDoubleProperty<DetailMovieModel>(_entities[0].properties[20]);

  /// see [DetailMovieModel.voteCount]
  static final voteCount =
      QueryIntegerProperty<DetailMovieModel>(_entities[0].properties[21]);
}
